/*
 * Copyright 2011-2021 Asakusa Framework Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def versions = file('distribution.properties').withInputStream {
    Properties props = new Properties()
    props.load(it)
    return props
}

group = 'com.asakusafw.gradle'
version = versions.distribution

defaultTasks 'clean', 'build', 'install', 'assembleTemplates'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

configurations {
    deployerJars
}

repositories {
    if (project.hasProperty('mavenLocal')) {
        logger.lifecycle 'enabling maven local repository'
        mavenLocal()
    }
    mavenCentral()
    maven { url 'https://asakusafw.s3.amazonaws.com/maven/releases' }
    maven { url 'https://asakusafw.s3.amazonaws.com/maven/snapshots' }
}

dependencies {
    compile gradleApi()
    compile group: 'com.asakusafw', name: 'asakusa-gradle-plugins', version: System.getProperty('core', versions.core)
    compile group: 'com.asakusafw.spark', name: 'asakusa-spark-gradle', version: System.getProperty('spark', versions.spark)
    compile group: 'com.asakusafw.m3bp', name: 'asakusa-m3bp-gradle', version: System.getProperty('m3bp', versions.m3bp)
    compile group: 'com.asakusafw.vanilla', name: 'asakusa-vanilla-gradle', version: System.getProperty('vanilla', versions.vanilla)
    compile group: 'com.asakusafw.mapreduce', name: 'asakusa-mapreduce-gradle', version: System.getProperty('mapreduce', versions.mapreduce)

    testCompile gradleTestKit()
    testCompile group: 'com.asakusafw', name: 'asakusa-gradle-plugins', version: System.getProperty('core', versions.core), classifier: 'tests'
    testCompile 'junit:junit:4.12'

    deployerJars 'org.springframework.build:aws-maven:5.0.0.RELEASE'
}

project.sourceCompatibility = JavaVersion.toVersion('1.8')

eclipse.jdt {
    javaRuntimeName = "JavaSE-${sourceCompatibility}"
}
if (project.hasProperty('referProject')) {
    eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries = classpath.entries.collect { entry ->
            if (entry instanceof org.gradle.plugins.ide.eclipse.model.Library \
                    && entry.moduleVersion \
                    && entry.moduleVersion.name ==~ /asakusa-(gradle-\w+|\w+-gradle)/ ) {
                new org.gradle.plugins.ide.eclipse.model.ProjectDependency("/${entry.moduleVersion.name}")
            } else {
                entry
            }
        }.unique() as List
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = project.configurations.deployerJars
            repository id: 'com.asakusafw.releases', url: 's3://asakusafw/maven/releases'
            snapshotRepository id: 'com.asakusafw.snapshots', url: 's3://asakusafw/maven/snapshots'
        }
    }
}

task assembleTemplates {
    description 'assembles application project templates'
}

file('src/templates').eachDirMatch({ it.startsWith 'asakusa-' }) { File source ->
    String projectName = source.name
    File output = new File(buildDir, "templates/${projectName}")
    String generateTaskName = "generate_${projectName}"
    String processTaskName = "process_${projectName}"
    String assembleTaskName = "assemble_${projectName}"
    tasks.create(name: generateTaskName, type: Copy) {
        doFirst {
            delete output
        }
        from source
        from file('src/templates/common')
        filesMatching('build.gradle') {
            expand gradlePluginVersion: version,
                mavenRepoType: version.endsWith('SNAPSHOT') ? 'snapshots' : 'releases'
        }
        into output
    }
    tasks.create(name: processTaskName, type: GradleBuild, dependsOn: generateTaskName) {
        dir output
        file('src/templates/init.d').eachFileMatch({ it.endsWith('.gradle') }) {
            startParameter.addInitScript it
        }
        doLast {
            mkdir new File(output, 'src/main/java')
            mkdir new File(output, 'src/main/resources')
            mkdir new File(output, 'src/main/dmdl')
            mkdir new File(output, 'src/main/libs')
            mkdir new File(output, 'src/test/java')
        }
        tasks = ['asakusaUpgrade']
    }
    tasks.create(name: assembleTaskName, type: Tar, dependsOn: processTaskName) {
        from (output) {
            exclude "build"
            exclude ".gradle"
            into projectName
        }
        destinationDir buildDir
        compression Compression.GZIP
        archiveName "${projectName}-${version}.tar.gz"
    }
    assembleTemplates.dependsOn assembleTaskName
}
